import { UnAuthenticatedClient } from './client';
import { UUID } from './contracts/utils/uuid.contract';
import { CreateCodeDto } from './dto/codes/create-code.dto';
import { CreateCodesDto } from './dto/codes/create-codes.dto';
import { UpdateCodeDto } from './dto/codes/update-code.dto';
import { GetMyRedeemedCodesDto } from './dto/codes/get-my-redeemed-codes.dto';
import { SearchCodeTemplatesDto } from './dto/util/search-code-templates.dto';
import { IConstructPromofire } from './contracts/promofire/construct-promofire.contract';
import { IAuthenticateClient } from './contracts/client/authenticate-client.contract';
import { GetRedeemsOfMyCodesDto } from './dto/codes/get-redeems-of-my-codes.dto';
import { PatchUpdateCustomerDto } from './dto/customers/update-customer.dto';
import { IPaginable } from './contracts/dto/paginable.contract';
import { CodesDto } from './dto/codes/paginated-codes.dto';
import { CodeDto } from './dto/codes/code.dto';
import { CodeTemplate } from './entities/code-template.entity';
import { PaginatedCodeTemplatesDto } from './dto/code-templates/paginated-code-template.dto';
import { PaginatedCodeRedeemsDto } from './dto/code-redeems/paginated-code-redeems.dto';
import { CustomerDto } from './dto/customers/customer.dto';
export { UnAuthenticatedClient as Client };
export declare class Promofire {
    private client;
    constructor(options: IConstructPromofire);
    activate(options?: IAuthenticateClient): Promofire;
    getCampaigns(options: SearchCodeTemplatesDto): Promise<PaginatedCodeTemplatesDto>;
    getCampaignById(id: UUID): Promise<CodeTemplate | null>;
    getMyAvailableCodes(options: IPaginable): Promise<CodesDto | null>;
    getCodeByValue(codeValue: string): Promise<CodeDto | null>;
    generateCode(createCodeDto: CreateCodeDto): Promise<CodeDto>;
    generateCodesBatch(createCodesDto: CreateCodesDto): Promise<CodeDto[]>;
    updateCode(codeValue: string, updateCodeDto: UpdateCodeDto): Promise<CodeDto>;
    redeemCode(codeValue: string): Promise<void>;
    getRedeemsOfMyCode(getMyRedeemedCodesDto: GetRedeemsOfMyCodesDto): Promise<PaginatedCodeRedeemsDto>;
    getMyRedeems(getMyRedeemedCodesDto: GetMyRedeemedCodesDto): Promise<PaginatedCodeRedeemsDto>;
    getMe(): Promise<CustomerDto>;
    updateMe(updateMeDto: PatchUpdateCustomerDto): Promise<CustomerDto>;
}
